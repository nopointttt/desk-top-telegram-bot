# –§–∞–π–ª: C:\desk_top\src\handlers\session.py
import logging
import json
import asyncio
from aiogram import Router, F, Bot
from aiogram.enums import ChatAction
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.filters import Command
from sqlalchemy.ext.asyncio import AsyncSession
from src.db.repository import UserRepository, SessionRepository, PersonalizedPromptRepository
from src.services.llm_client import LLMClient
from src.services.rag_client import RAGClient

router = Router()
logger = logging.getLogger(__name__)

profile_choice_keyboard = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–ö–æ–¥–µ—Ä"), KeyboardButton(text="–ü—Ä–æ–¥–∞–∫—Ç –º–µ–Ω–µ–¥–∂–µ—Ä")], [KeyboardButton(text="–õ–∏—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç")]], resize_keyboard=True, one_time_keyboard=True)

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î –ò –ö–û–ù–ö–†–ï–¢–ù–´–• –î–ï–ô–°–¢–í–ò–ô ---

@router.message(Command("start_session"))
async def cmd_start_session(message: Message):
    await message.answer("–° –∫–∞–∫–∏–º –ø—Ä–æ—Ñ–∏–ª–µ–º –Ω–∞—á–∞—Ç—å —Å–µ—Å—Å–∏—é?", reply_markup=profile_choice_keyboard)

@router.message(F.text.in_({"–ö–æ–¥–µ—Ä", "–ü—Ä–æ–¥–∞–∫—Ç –º–µ–Ω–µ–¥–∂–µ—Ä", "–õ–∏—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç"}))
async def process_profile_choice(message: Message, session: AsyncSession):
    profile_map = { "–ö–æ–¥–µ—Ä": "coder", "–ü—Ä–æ–¥–∞–∫—Ç –º–µ–Ω–µ–¥–∂–µ—Ä": "product_manager", "–õ–∏—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç": "personal_assistant" }
    profile = profile_map.get(message.text)
    user_repo = UserRepository(session)
    session_repo = SessionRepository(session)
    user = await user_repo.get_or_create_user(telegram_id=message.from_user.id, username=message.from_user.username)
    new_db_session = await session_repo.start_new_session(user, profile)
    logger.info(f"ANALYTICS - Event: SessionStarted, UserID: {message.from_user.id}, Details: {{'session_id': {new_db_session.id}, 'profile': '{profile}'}}")
    await message.answer(f"–ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è #{new_db_session.id} —Å –ø—Ä–æ—Ñ–∏–ª–µ–º '{message.text}' –Ω–∞—á–∞—Ç–∞. –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?", reply_markup=ReplyKeyboardRemove())

@router.message(Command("end_session"))
async def cmd_end_session(message: Message, session: AsyncSession, llm_client: LLMClient, rag_client: RAGClient):
    repo = SessionRepository(session)
    active_session = await repo.get_active_session(message.from_user.id)
    if not active_session:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π.")
        return
    await message.answer("–ü–æ–¥–≤–æ–∂—É –∏—Ç–æ–≥–∏ —Å–µ—Å—Å–∏–∏...")
    history = active_session.message_history
    if history:
        summary = await llm_client.get_summary(history)
        await rag_client.save_summary(active_session.id, message.from_user.id, summary)
    logger.info(f"ANALYTICS - Event: SessionEnded, UserID: {message.from_user.id}, Details: {{'session_id': {active_session.id}}}")
    await repo.close_all_active_sessions(message.from_user.id)
    await message.answer(f"–°–µ—Å—Å–∏—è #{active_session.id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ò—Ç–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")

@router.message(Command("list_sessions"))
async def cmd_list_sessions(message: Message, session: AsyncSession):
    repo = SessionRepository(session)
    user_sessions = await repo.list_sessions(message.from_user.id)
    if not user_sessions:
        await message.answer("–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π —Å–µ—Å—Å–∏–∏.")
        return
    response_text = "–í–∞—à–∏ —Å–µ—Å—Å–∏–∏:\n\n"
    for s in user_sessions:
        status_emoji = "üü¢" if s.status == 'active' else "üî¥"
        response_text += f"{status_emoji} –°–µ—Å—Å–∏—è #{s.id} –æ—Ç {s.created_at.strftime('%Y-%m-%d %H:%M')}\n"
    await message.answer(response_text)

# --- –û–ë–©–ò–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –¢–ï–ö–°–¢–ê (–° –£–õ–£–ß–®–ï–ù–ù–´–ú UX) ---

@router.message(F.content_type.in_({'text'}))
async def handle_text_message(message: Message, session: AsyncSession, bot: Bot, llm_client: LLMClient, rag_client: RAGClient):
    user_id = message.from_user.id
    user_repo = UserRepository(session)
    session_repo = SessionRepository(session)
    
    user = await user_repo.get_or_create_user(user_id, message.from_user.username)
    request_tokens = llm_client.count_tokens(message.text)
    if not await user_repo.check_and_update_limits(user, request_tokens):
        await message.answer("–í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ —Å—É—Ç–æ—á–Ω—ã–π –ª–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∑–∞–≤—Ç—Ä–∞.")
        return

    active_session = await session_repo.get_active_session(user_id)
    if not active_session:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏. –ù–∞—á–Ω–∏—Ç–µ —Å /start_session")
        return

    # --- –£–õ–£–ß–®–ï–ù–ù–´–ô UX ---
    status_message = await message.answer("<i>–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∑–∞–ø—Ä–æ—Å...</i>")
    try:
        prompt_repo = PersonalizedPromptRepository(session)
        system_prompt = await prompt_repo.get_prompt(user_id, active_session.active_profile)
        if not system_prompt:
            await status_message.edit_text("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ —Å /personalize")
            return
        
        history = active_session.message_history

        # –≠—Ç–∞–ø 1: –ü–æ–∏—Å–∫ –≤ RAG
        await status_message.edit_text("<i>–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∑–∞–ø—Ä–æ—Å...\n–ò—â—É —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç–∏...</i>")
        relevant_summaries = await rag_client.find_relevant_summaries(user_id, message.text)
        
        # –≠—Ç–∞–ø 2: –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ LLM
        log_text = (
            f"<i>–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∑–∞–ø—Ä–æ—Å...\n"
            f"–ò—â—É —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç–∏... ‚úì\n"
            f"–ù–∞–π–¥–µ–Ω–æ {len(relevant_summaries)} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –∏—Ç–æ–≥–æ–≤.\n"
            f"–§–æ—Ä–º–∏—Ä—É—é –∑–∞–ø—Ä–æ—Å –∫ AI...</i>"
        )
        await status_message.edit_text(log_text)

        response_text = await llm_client.get_response(
            system_prompt, history, message.text, rag_context=relevant_summaries
        )

        response_tokens = llm_client.count_tokens(response_text)
        await user_repo.check_and_update_limits(user, response_tokens)

        current_history_text = " ".join([msg['content'] for msg in history])
        token_count = llm_client.count_tokens(current_history_text)
        CONTEXT_WINDOW = 16000 
        response_with_context = (
            f"{response_text}\n\n"
            f"--- \n"
            f"<i>–ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–µ—Å—Å–∏–∏: {token_count} / {CONTEXT_WINDOW} —Ç–æ–∫–µ–Ω–æ–≤</i>"
        )
        
        # –≠—Ç–∞–ø 3: –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        await status_message.edit_text(response_with_context)
        
        await session_repo.update_message_history(active_session.id, {"role": "user", "content": message.text})
        await session_repo.update_message_history(active_session.id, {"role": "assistant", "content": response_text})
    except Exception as e:
        logger.error(f"Error in handle_text_message: {e}", exc_info=True)
        await status_message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.")