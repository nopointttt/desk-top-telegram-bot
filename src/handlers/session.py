# –§–∞–π–ª: C:\desk_top\src\handlers\session.py
import logging
import json
import asyncio
import re  # <-- 1. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
import unicodedata
from aiogram import Router, F, Bot
from aiogram.enums import ChatAction
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.filters import Command, StateFilter
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from src.db.models import Mode
from src.db.repository import (
    UserRepository,
    SessionRepository,
    PersonalizedPromptRepository,
    ProjectRepository,
    ProjectAccessRepository,
)
from src.services.llm_client import LLMClient
from src.services.rag_client import RAGClient
from src.services.prompt_builder import build_prompt

router = Router()
logger = logging.getLogger(__name__)

profile_choice_keyboard = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–ö–æ–¥–µ—Ä"), KeyboardButton(text="–ü—Ä–æ–¥–∞–∫—Ç –º–µ–Ω–µ–¥–∂–µ—Ä")], [KeyboardButton(text="–õ–∏—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç")]], resize_keyboard=True, one_time_keyboard=True)

# --- 2. –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ HTML ---
def clean_html(raw_html: str) -> str:
    """–ù–∞–¥–µ–∂–Ω–æ —É–¥–∞–ª—è–µ—Ç –≤—Å–µ HTML-—Ç–µ–≥–∏ –∏–∑ —Å—Ç—Ä–æ–∫–∏."""
    if not isinstance(raw_html, str):
        return ""
    cleanr = re.compile('<.*?>')
    cleantext = re.sub(cleanr, '', raw_html)
    return cleantext

# --- –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏–º—ë–Ω –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è —É—Å—Ç–æ–π—á–∏–≤–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è ---
def _norm(s: str) -> str:
    """Unicode NFKC + casefold + trim –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏–º—ë–Ω (–Ω–µ –º–µ–Ω—è–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–µ).
    –°–æ–≤–º–µ—Å—Ç–∏–º–æ —Å handlers/acl.py._norm.
    """
    return unicodedata.normalize("NFKC", (s or "").strip()).casefold()

# --- –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –µ—Å–ª–∏ –Ω–µ–ª—å–∑—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ---
async def safe_edit_or_send(bot: Bot, status_message: Message, text: str):
    try:
        await status_message.edit_text(text)
    except Exception:
        await bot.send_message(chat_id=status_message.chat.id, text=text)

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
@router.message(Command("start_session"))
async def cmd_start_session(message: Message):
    await message.answer("–° –∫–∞–∫–∏–º –ø—Ä–æ—Ñ–∏–ª–µ–º –Ω–∞—á–∞—Ç—å —Å–µ—Å—Å–∏—é?", reply_markup=profile_choice_keyboard)

@router.message(F.text.in_({"–ö–æ–¥–µ—Ä", "–ü—Ä–æ–¥–∞–∫—Ç –º–µ–Ω–µ–¥–∂–µ—Ä", "–õ–∏—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç"}))
async def process_profile_choice(message: Message, session: AsyncSession):
    profile_map = { "–ö–æ–¥–µ—Ä": "coder", "–ü—Ä–æ–¥–∞–∫—Ç –º–µ–Ω–µ–¥–∂–µ—Ä": "product_manager", "–õ–∏—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç": "personal_assistant" }
    profile = profile_map.get(message.text)
    user_repo = UserRepository(session)
    session_repo = SessionRepository(session)
    user = await user_repo.get_or_create_user(telegram_id=message.from_user.id, username=message.from_user.username)
    new_db_session = await session_repo.start_new_session(user, profile)
    logger.info(f"ANALYTICS - Event: SessionStarted, UserID: {message.from_user.id}, Details: {{'session_id': {new_db_session.id}, 'profile': '{profile}'}}")
    await message.answer(f"–ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è #{new_db_session.id} —Å –ø—Ä–æ—Ñ–∏–ª–µ–º '{message.text}' –Ω–∞—á–∞—Ç–∞. –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?", reply_markup=ReplyKeyboardRemove())

@router.message(Command("end_session"))
async def cmd_end_session(message: Message, session: AsyncSession, llm_client: LLMClient, rag_client: RAGClient):
    repo = SessionRepository(session)
    active_session = await repo.get_active_session(message.from_user.id)
    if not active_session:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π.")
        return
    await message.answer("–ü–æ–¥–≤–æ–∂—É –∏—Ç–æ–≥–∏ —Å–µ—Å—Å–∏–∏...")
    history = active_session.message_history
    if history:
        summary = await llm_client.get_summary(history)
        await rag_client.save_summary(
            active_session.id,
            message.from_user.id,
            summary,
            project_id=active_session.project_id,
        )
    logger.info(f"ANALYTICS - Event: SessionEnded, UserID: {message.from_user.id}, Details: {{'session_id': {active_session.id}}}")
    await repo.close_all_active_sessions(message.from_user.id)
    await message.answer(f"–°–µ—Å—Å–∏—è #{active_session.id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ò—Ç–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")

@router.message(Command("list_sessions"))
async def cmd_list_sessions(message: Message, session: AsyncSession):
    repo = SessionRepository(session)
    user_sessions = await repo.list_sessions(message.from_user.id)
    if not user_sessions:
        await message.answer("–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π —Å–µ—Å—Å–∏–∏.")
        return
    response_text = "–í–∞—à–∏ —Å–µ—Å—Å–∏–∏:\n\n"
    for s in user_sessions:
        status_emoji = "üü¢" if s.status == 'active' else "üî¥"
        response_text += f"{status_emoji} –°–µ—Å—Å–∏—è #{s.id} –æ—Ç {s.created_at.strftime('%Y-%m-%d %H:%M')}\n"
    await message.answer(response_text)

@router.message(Command("current"))
async def cmd_current(message: Message, session: AsyncSession):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é –∏ –ø—Ä–æ–µ–∫—Ç (–µ—Å–ª–∏ –µ—Å—Ç—å)."""
    sess_repo = SessionRepository(session)
    proj_repo = ProjectRepository(session)

    active = await sess_repo.get_active_session(message.from_user.id)
    if not active:
        await message.answer(
            "–ê–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –Ω–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start_session –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–ª–∏ /projects –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞."
        )
        return

    project_part = "–±–µ–∑ –ø—Ä–æ–µ–∫—Ç–∞"
    mode_part = "mode=n/a"
    ctx_part = "ctx=project"
    if active.project_id:
        project = await proj_repo.get_project_by_id(active.project_id)
        if project:
            project_part = f"–ø—Ä–æ–µ–∫—Ç: {project.name} (id={project.id})"
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –ø–æ–∫–∞–∂–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π Mode –∏–∑ —Å–µ—Å—Å–∏–∏
    try:
        m_id = getattr(active, 'mode_id', None)
        if m_id:
            res = await session.execute(select(Mode).where(Mode.id == m_id))
            m = res.scalar_one_or_none()
            if m:
                temp_display = f", t={m.temperature}" if getattr(m, 'temperature', None) not in (None, "") else ""
                mode_part = f"mode: {m.name}{temp_display}"
    except Exception:
        pass

    # –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    try:
        ctx = await sess_repo.get_context_mode(message.from_user.id)
        if ctx:
            ctx_part = f"ctx={ctx}"
    except Exception:
        pass

    text = (
        f"–¢–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è #{active.id} (–ø—Ä–æ—Ñ–∏–ª—å: {active.active_profile or 'n/a'}, {project_part}, {mode_part}, {ctx_part}).\n"
        f"–°–æ–∑–¥–∞–Ω–∞: {active.created_at.strftime('%Y-%m-%d %H:%M')}\n"
        f"–ü–æ–¥—Å–∫–∞–∑–∫–∞: –º–æ–∂–Ω–æ —Å—Å—ã–ª–∞—Ç—å—Å—è –Ω–∞ –¥—Ä—É–≥–∏–µ –ø—Ä–æ–µ–∫—Ç—ã —á–µ—Ä–µ–∑ @[ProjectName]."
    )
    await message.answer(text)


@router.message(Command("pin_status"))
async def pin_status(message: Message, session: AsyncSession, bot: Bot):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏ –ø—ã—Ç–∞–µ—Ç—Å—è –∑–∞–∫—Ä–µ–ø–∏—Ç—å –±–∞–Ω–Ω–µ—Ä —Å—Ç–∞—Ç—É—Å–∞ (—Ç–µ–∫—É—â–∏–π –ø—Ä–æ–µ–∫—Ç/—Ä–µ–∂–∏–º/—Å–µ—Å—Å–∏—è)."""
    user_repo = UserRepository(session)
    sess_repo = SessionRepository(session)
    proj_repo = ProjectRepository(session)

    user = await user_repo.get_or_create_user(message.from_user.id, message.from_user.username)
    active = await sess_repo.get_active_session(user.telegram_id)
    if not active:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start_session –∏–ª–∏ /projects.")
        return
    project_part = "–±–µ–∑ –ø—Ä–æ–µ–∫—Ç–∞"
    mode_part = "mode=n/a"
    if active.project_id:
        project = await proj_repo.get_project_by_id(active.project_id)
        if project:
            project_part = f"–ø—Ä–æ–µ–∫—Ç: {project.name} (id={project.id})"
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: Mode –∏–∑ —Å–µ—Å—Å–∏–∏
    try:
        m_id = getattr(active, 'mode_id', None)
        if m_id:
            res = await session.execute(select(Mode).where(Mode.id == m_id))
            m = res.scalar_one_or_none()
            if m:
                temp_display = f", t={m.temperature}" if getattr(m, 'temperature', None) not in (None, "") else ""
                mode_part = f"mode: {m.name}{temp_display}"
    except Exception:
        pass

    # –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    try:
        ctx = await sess_repo.get_context_mode(user.telegram_id)
        if ctx:
            ctx_part = f"ctx={ctx}"
    except Exception:
        pass

    banner = (
        f"üìå –°—Ç–∞—Ç—É—Å: —Å–µ—Å—Å–∏—è #{active.id} (–ø—Ä–æ—Ñ–∏–ª—å: {active.active_profile or 'n/a'}, {project_part}, {mode_part}, {ctx_part}).\n"
        f"–°–æ–∑–¥–∞–Ω–∞: {active.created_at.strftime('%Y-%m-%d %H:%M')}\n"
        f"–ü–æ–¥—Å–∫–∞–∑–∫–∞: /projects –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è, @[ProjectName] –¥–ª—è –º–µ–∂–ø—Ä–æ–µ–∫—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞."
    )
    sent = await message.answer(banner)
    try:
        await bot.pin_chat_message(chat_id=sent.chat.id, message_id=sent.message_id, disable_notification=True)
    except Exception:
        # –ù–µ—Ç –ø—Ä–∞–≤ –∏–ª–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Å—Ç–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        pass

# --- –û–ë–©–ò–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –¢–ï–ö–°–¢–ê (–∏—Å–∫–ª—é—á–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –∏ –ª—é–±—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è) ---
@router.message(F.content_type.in_({'text'}), ~F.text.regexp(r'^/'), StateFilter(None))
async def handle_text_message(message: Message, session: AsyncSession, bot: Bot, llm_client: LLMClient, rag_client: RAGClient):
    user_id = message.from_user.id
    user_repo = UserRepository(session)
    session_repo = SessionRepository(session)
    project_repo = ProjectRepository(session)
    
    user = await user_repo.get_or_create_user(user_id, message.from_user.username)
    request_tokens = llm_client.count_tokens(message.text)
    if not await user_repo.check_and_update_limits(user, request_tokens):
        await message.answer("–í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ —Å—É—Ç–æ—á–Ω—ã–π –ª–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∑–∞–≤—Ç—Ä–∞.")
        return

    active_session = await session_repo.get_active_session(user_id)
    if not active_session:
        # –ù–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π —Ä–µ–∂–∏–º: –ø—Ä–æ–±—É–µ–º –æ—Ç–≤–µ—Ç–∏—Ç—å —ç–ø–∏–∑–æ–¥–∏—á–µ—Å–∫–∏ –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏.
        # 1) –ü—Ä–µ–¥–ª–æ–∂–∏–º –±—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        quick_actions = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="/start_session"), KeyboardButton(text="/new_project")],
                [KeyboardButton(text="/projects")],
            ],
            resize_keyboard=True,
            one_time_keyboard=True,
        )

        status_message = await message.answer(
            "<i>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ ‚Äî –æ—Ç–≤–µ—á—É –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.\n"
            "–ú–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å /start_session –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç.</i>",
            reply_markup=quick_actions,
        )

        try:
            # –í—ã–±–µ—Ä–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–ø—Ä–æ—Ñ–∏–ª—å 'coder')
            prompt_repo = PersonalizedPromptRepository(session)
            system_prompt = await prompt_repo.get_prompt(user_id, "coder")
            if not system_prompt:
                await safe_edit_or_send(bot, status_message, "–ü—Ä–æ—Ñ–∏–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û—Ç–∫—Ä–æ–π—Ç–µ /personalize –∏–ª–∏ /start_session")
                return

            # –ò—Å—Ç–æ—Ä–∏–∏ –Ω–µ—Ç, –æ—Ç–≤–µ—Ç –±—É–¥–µ—Ç –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–º
            history: list[dict] = []

            # –≠—Ñ–µ–º–µ—Ä–Ω—ã–π —Ä–µ–∂–∏–º: —Å—Ç—Ä–æ–≥–∞—è –∏–∑–æ–ª—è—Ü–∏—è ‚Äî –±–µ–∑ –º–µ–∂–ø—Ä–æ–µ–∫—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞.
            await safe_edit_or_send(bot, status_message, "<i>–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∑–∞–ø—Ä–æ—Å...\n–ò—â—É —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç–∏...</i>")
            relevant_summaries = await rag_client.find_relevant_summaries(user_id, message.text, project_id=None)
            cross_info = ""
            await safe_edit_or_send(bot, status_message, (
                f"<i>–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∑–∞–ø—Ä–æ—Å...\n–ò—â—É —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç–∏... ‚úì\n"
                f"–ù–∞–π–¥–µ–Ω–æ {len(relevant_summaries)} –∏—Ç–æ–≥–æ–≤{cross_info}.\n–§–æ—Ä–º–∏—Ä—É—é –∑–∞–ø—Ä–æ—Å –∫ AI...</i>"
            ))

            response_text_raw = await llm_client.get_response(
                system_prompt, history, message.text, rag_context=relevant_summaries
            )
            response_text = clean_html(response_text_raw)

            response_tokens = llm_client.count_tokens(response_text)
            await user_repo.check_and_update_limits(user, response_tokens)

            await safe_edit_or_send(bot, status_message, response_text + "\n\n--- \n<i>–≠—Ñ–µ–º–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç (–±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏). –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start_session –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞.</i>")
        except Exception as e:
            logger.error(f"Error in ephemeral handle_text_message: {e}", exc_info=True)
            await safe_edit_or_send(bot, status_message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.")
        return

    status_message = await message.answer("<i>–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∑–∞–ø—Ä–æ—Å...</i>")
    try:
        # 1) –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –∏ —Å—Ç—Ä–æ–∏–º system_prompt —á–µ—Ä–µ–∑ Prompt Builder
        active_project = None
        if active_session.project_id:
            active_project = await project_repo.get_project_by_id(active_session.project_id)

        try:
            system_prompt, mode_temperature = await build_prompt(session, user_id, active_session, active_project)
        except ValueError as e:
            await safe_edit_or_send(bot, status_message, str(e))
            return

        history = active_session.message_history

        # 2) RAG –ø–æ —Ä–µ–∂–∏–º—É –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: 'project' | 'acl_mentions' | 'global'
        await safe_edit_or_send(bot, status_message, "<i>–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∑–∞–ø—Ä–æ—Å...\n–ò—â—É —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç–∏...</i>")
        session_repo = SessionRepository(session)
        context_mode = await session_repo.get_context_mode(user_id)

        relevant_summaries: list[str] = []
        cross_info = ""

        if context_mode == 'global':
            # –ü–æ–ª–Ω–æ—Å—Ç—å—é –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –±–µ–∑ –ø—Ä–æ–µ–∫—Ç–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
            relevant_summaries = await rag_client.find_relevant_summaries(
                user_id, message.text, project_id=None, project_ids=None
            )
        elif context_mode == 'project':
            # –¢–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–µ–∫—Ç (–µ—Å–ª–∏ –æ–Ω –∑–∞–¥–∞–Ω), –∏–Ω–∞—á–µ –≥–ª–æ–±–∞–ª—å–Ω–æ
            pid = active_project.id if active_project else None
            relevant_summaries = await rag_client.find_relevant_summaries(
                user_id, message.text, project_id=pid, project_ids=None
            )
        else:
            # acl_mentions: —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–µ–∫—Ç + —É–ø–æ–º—è–Ω—É—Ç—ã–µ @[Project] –ø–æ ACL
            project_ids: list[int] = []
            if not active_project:
                # –ñ—ë—Å—Ç–∫–∞—è –∏–∑–æ–ª—è—Ü–∏—è: –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ acl_mentions –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç RAG
                relevant_summaries = []
                cross_info = " | acl_mentions: –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞"
            else:
                project_ids.append(active_project.id)

                mentions = re.findall(r"@\[([^\]]+)\]", message.text or "")
                unique_mentions: list[str] = []
                for name in mentions:
                    n = name.strip()
                    if n and n not in unique_mentions:
                        unique_mentions.append(n)

                ignored_missing: list[str] = []   # –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–æ–µ–∫—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                ignored_denied: list[str] = []    # –Ω–µ—Ç ACL-–¥–æ—Å—Ç—É–ø–∞

                if unique_mentions:
                    acl_repo = ProjectAccessRepository(session)
                    # –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∏–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
                    user_projects = await project_repo.list_projects(user_id)
                    for proj_name in unique_mentions:
                        # 1) –ü—ã—Ç–∞–µ–º—Å—è —Ç–æ—á–Ω—ã–º –∏–º–µ–Ω–µ–º
                        other_proj = await project_repo.get_project_by_name(user_id, proj_name)
                        # 2) –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ ‚Äî –ø—Ä–æ–±—É–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ä–µ–¥–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        if not other_proj and user_projects:
                            target_norm = _norm(proj_name)
                            for p in user_projects:
                                if _norm(getattr(p, 'name', '')) == target_norm:
                                    other_proj = p
                                    break
                        if not other_proj:
                            ignored_missing.append(proj_name)
                            continue
                        if await acl_repo.is_allowed(active_project.id, other_proj.id):
                            project_ids.append(other_proj.id)
                        else:
                            ignored_denied.append(proj_name)

                relevant_summaries = await rag_client.find_relevant_summaries(
                    user_id, message.text,
                    project_id=None if project_ids else (active_project.id if active_project else None),
                    project_ids=project_ids if project_ids else None,
                )

                if project_ids and len(project_ids) > 1:
                    cross_info = f" (+{len(project_ids)-1} –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ ACL)"
                # –î–æ–±–∞–≤–∏–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –ø–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è–º (–±–µ–∑ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞)
                ignored_parts = []
                if ignored_missing:
                    ignored_parts.append(f"–Ω–µ—Ç —Ç–∞–∫–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤: {', '.join(ignored_missing)}")
                if ignored_denied:
                    ignored_parts.append(f"–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞: {', '.join(ignored_denied)}")
                if ignored_parts:
                    suffix = "; ".join(ignored_parts)
                    cross_info += f" | –∏–≥–Ω–æ—Ä: {suffix}"
        log_text = (
            f"<i>–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∑–∞–ø—Ä–æ—Å...\n"
            f"–ò—â—É —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç–∏... ‚úì\n"
            f"–ù–∞–π–¥–µ–Ω–æ {len(relevant_summaries)} –∏—Ç–æ–≥–æ–≤{cross_info}.\n"
            f"–§–æ—Ä–º–∏—Ä—É—é –∑–∞–ø—Ä–æ—Å –∫ AI...</i>"
        )
        await safe_edit_or_send(bot, status_message, log_text)

        response_text_raw = await llm_client.get_response(
            system_prompt, history, message.text, rag_context=relevant_summaries, temperature=mode_temperature
        )

        # --- 3. –ü–†–ò–ú–ï–ù–Ø–ï–ú –û–ß–ò–°–¢–ö–£ ---
        response_text = clean_html(response_text_raw)

        response_tokens = llm_client.count_tokens(response_text)
        await user_repo.check_and_update_limits(user, response_tokens)

        current_history_text = " ".join([msg['content'] for msg in history])
        token_count = llm_client.count_tokens(current_history_text)
        CONTEXT_WINDOW = 16000 
        response_with_context = (
            f"{response_text}\n\n"
            f"--- \n"
            f"<i>–ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–µ—Å—Å–∏–∏: {token_count} / {CONTEXT_WINDOW} —Ç–æ–∫–µ–Ω–æ–≤</i>"
        )
        
        await safe_edit_or_send(bot, status_message, response_with_context)
        
        await session_repo.update_message_history(active_session.id, {"role": "user", "content": message.text})
        await session_repo.update_message_history(active_session.id, {"role": "assistant", "content": response_text})
    except Exception as e:
        logger.error(f"Error in handle_text_message: {e}", exc_info=True)
        await safe_edit_or_send(bot, status_message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.")